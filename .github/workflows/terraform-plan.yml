# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  TF_VAR_backend_storage_container: ${{ secrets.TF_VAR_backend_storage_container }}
  TF_VAR_backend_storage_account: ${{ secrets.TF_VAR_backend_storage_account }}
  TF_VAR_backend_resource_group: ${{ secrets.TF_VAR_backend_resource_group }}
  TF_IN_AUTOMATION: true
  TF_WORKSPACE: ci

name: TerraformPlan

jobs:
  build-and-deploy:
    # defaults:
    #   run:
    #     working-directory: ${{ env.tf_actions_working_dir }}
    # runs-on: ${{ matrix.os }}
    # strategy:
    #     matrix:
    #       os: [windows-latest, ubuntu-latest, macos-latest]
    #       terraform-versions: [0.11.14, latest]
    runs-on: ubuntu-latest
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - name: Checkout source
      uses: actions/checkout@v2

    - name: Get Azure CLI
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        # enable-AzPSSession: false

    - name: Detect desired Terraform version
      id: terraform-version-check
      run: | 
        $terraforrmVersion = (Get-Content ./terraform/.terraform-version)
        echo '::set-output name=TERRAFORM_VERSION::${terraforrmVersion}'
        # ${{ steps.random-color-generator.outputs.SELECTED_COLOR }}
      shell: pwsh
    - name: Get Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: ${{ steps.terraform-version-check.outputs.TERRAFORM_VERSION }}


    - name: Terraform Init
      uses: Azure/powershell@v1
      env:
        AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
        # TF_VAR_backend_storage_container: ${{ secrets.TF_VAR_backend_storage_container }}
        # TF_VAR_backend_storage_account: ${{ secrets.TF_VAR_backend_storage_account }}
        # TF_VAR_backend_resource_group: ${{ secrets.TF_VAR_backend_resource_group }}
      with:
        inlineScript: | 
          # Parse Azure secret into Terraform variables
          $servicePrincipal = ($env:AZURE_CREDENTIALS | ConvertFrom-Json)
          $env:ARM_CLIENT_ID = $servicePrincipal.clientId
          $env:ARM_CLIENT_SECRET = $servicePrincipal.clientSecret
          $env:ARM_SUBSCRIPTION_ID = $servicePrincipal.subscriptionId
          $env:ARM_TENANT_ID = $servicePrincipal.tenantId

          $env:TF_VAR_run_id=$env:GITHUB_RUN_ID
          
          # List environment variables
          Get-ChildItem -Path Env: -Recurse -Include ARM_*,AZURE_*,GITHUB_*,TF_* | Sort-Object -Property Name
          # Save environment variable setup for subsequent steps
          Get-ChildItem -Path Env: -Recurse -Include ARM_*,TF_VAR_* | ForEach-Object {Write-Output "$($_.Name)=$($_.Value)"} >> $env:GITHUB_ENV

          ./scripts/deploy.ps1 -init -nobackend
        azPSVersion: latest
        errorActionPreference: Stop
        failOnStandardError: true

    - name: Terraform Plan
      uses: Azure/powershell@v1
      env:
        AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
        # TF_VAR_backend_storage_container: ${{ secrets.TF_VAR_backend_storage_container }}
        # TF_VAR_backend_storage_account: ${{ secrets.TF_VAR_backend_storage_account }}
        # TF_VAR_backend_resource_group: ${{ secrets.TF_VAR_backend_resource_group }}
      with:
        inlineScript: | 
          # List environment variables
          Get-ChildItem -Path Env: -Recurse -Include ARM_*,AZURE_*,GITHUB_*,TF_* | Sort-Object -Property Name

          ./scripts/deploy.ps1 -plan
        azPSVersion: latest
        errorActionPreference: Stop
        failOnStandardError: true


    - name: Clean Up
      uses: Azure/powershell@v1
      with:
        # azcliversion: 2.0.72
        inlineScript: |
          # Build JMESPath expression
          $repository = ($env:GITHUB_REPOSITORY).Split("/")[-1]
          $runID = $env:GITHUB_RUN_ID
          $tagQuery = "[?tags.repository == '${repository}' && tags.run-id == '${runID}' && properties.provisioningState != 'Deleting'].id"

          Write-Host "Removing resource group identified by `"$tagQuery`"..."
          $resourceGroupIDs = $(az group list --query "$tagQuery" -o tsv)
          if ($resourceGroupIDs) {
            Write-Host "az resource delete --ids ${resourceGroupIDs}..."
            az resource delete --ids $resourceGroupIDs"
          }
          
        azPSVersion: latest