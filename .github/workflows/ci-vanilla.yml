# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  schedule:
  - cron:  '0 3 * * *'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  TF_VAR_backend_storage_container: ${{ secrets.TF_VAR_backend_storage_container }}
  TF_VAR_backend_storage_account: ${{ secrets.TF_VAR_backend_storage_account }}
  TF_VAR_backend_resource_group: ${{ secrets.TF_VAR_backend_resource_group }}
  TF_IN_AUTOMATION: true
  TF_WORKSPACE: ci

name: ci-vanilla

jobs:
  terraform:
    name: Provision solution and tear it down again
    defaults:
      run:
        working-directory: terraform
    # runs-on: ${{ matrix.os }}
    # strategy:
    #     matrix:
    #       os: [windows-latest, ubuntu-latest, macos-latest]
    #       terraform-versions: [0.11.14, latest]
    runs-on: ubuntu-latest
    steps:
    - name: Checkout source
      uses: actions/checkout@v2

    - name: Get Azure CLI
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Detect desired Terraform version
      id: terraform-version-check
      run: | 
        $terraformVersion = (Get-Content .terraform-version)
        Write-Output "::set-output name=TERRAFORM_VERSION::${terraformVersion}"
      shell: pwsh
    - name: Get Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: ${{ steps.terraform-version-check.outputs.TERRAFORM_VERSION }}
        terraform_wrapper: false

    - name: Terraform Init
      uses: Azure/powershell@v1
      env:
        AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
      with:
        inlineScript: | 
          # Parse Azure secret into Terraform variables
          $servicePrincipal = ($env:AZURE_CREDENTIALS | ConvertFrom-Json)
          $env:ARM_CLIENT_ID = $servicePrincipal.clientId
          $env:ARM_CLIENT_SECRET = $servicePrincipal.clientSecret
          $env:ARM_SUBSCRIPTION_ID = $servicePrincipal.subscriptionId
          $env:ARM_TENANT_ID = $servicePrincipal.tenantId

          $env:TF_VAR_run_id=$env:GITHUB_RUN_ID
          
          # List environment variables
          Get-ChildItem -Path Env: -Recurse -Include ARM_*,AZURE_*,GITHUB_*,TF_* | Sort-Object -Property Name
          # Save environment variable setup for subsequent steps
          Get-ChildItem -Path Env: -Recurse -Include ARM_*,TF_VAR_* | ForEach-Object {Write-Output "$($_.Name)=$($_.Value)"} >> $env:GITHUB_ENV

          Set-Location (Join-Path $env:GITHUB_WORKSPACE terraform) # Task does not support 'working-directory' property
          Get-Location
          terraform init
        azPSVersion: latest
        errorActionPreference: Stop
        failOnStandardError: true

    - name: Terraform Plan
      uses: Azure/powershell@v1
      with:
        inlineScript: | 
          Set-Location (Join-Path $env:GITHUB_WORKSPACE terraform) # Task does not support 'working-directory' property
          terraform plan -out='ci.tfplan'
        azPSVersion: latest
        errorActionPreference: Stop
        failOnStandardError: true

    - name: Terraform Apply
      if: ${{ github.event_name == 'pull_request' || github.event_name == 'schedule' }}
      id: terraform-apply
      uses: Azure/powershell@v1
      with:
        inlineScript: | 
          Set-Location (Join-Path $env:GITHUB_WORKSPACE terraform) # Task does not support 'working-directory' property
          terraform apply -auto-approve 'ci.tfplan'

          # Export Terraform output as step output
          $terraformOutput = (terraform output -json | ConvertFrom-Json -AsHashtable)     
          foreach ($key in $terraformOutput.Keys) {
            $outputVariableValue = $terraformOutput[$key].value
            Write-Output "::set-output name=${key}::${outputVariableValue}"
            Write-Output "TF_OUT_${key}=${outputVariableValue}" >> $env:GITHUB_ENV
          } 
        azPSVersion: latest
        errorActionPreference: Stop
        failOnStandardError: true

    - name: Test connection to Minecraft Server (pwsh)
      if: ${{ github.event_name == 'pull_request' || github.event_name == 'schedule' }}
      uses: Azure/powershell@v1
      env:
        AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
      with:
        inlineScript: | 
          # Wait for Minecraft to boot up
          $connectionAttempts = 0
          do {
            Start-Sleep -Seconds 10
            Write-Host "Pinging ${env:TF_OUT_minecraft_server_fqdn} on port ${env:TF_OUT_minecraft_server_port}..."
            try {
              $connectionAttempts++
              $mineCraftConnection = New-Object System.Net.Sockets.TcpClient($env:TF_OUT_minecraft_server_fqdn, $env:TF_OUT_minecraft_server_port) -ErrorAction SilentlyContinue
            } catch [System.Management.Automation.MethodInvocationException] {
              Write-Warning $_
            }
          } while ((!$mineCraftConnection || !$mineCraftConnection.Connected) -and ($connectionAttempts -le 10))
          
          az container show --ids ${{ steps.terraform-apply.outputs.container_group_id }} --query instanceView
          az container logs --ids ${{ steps.terraform-apply.outputs.container_group_id }}
          # BUG: no tty
          # az container exec --ids ${{ steps.terraform-apply.outputs.container_group_id }} --exec-command "rcon-cli say hello from ci" --container-name minecraft
        azPSVersion: latest
        errorActionPreference: Stop
        failOnStandardError: true # BUG: setting not honored!

    - name: Test connection to Minecraft Server (bash)
      if: ${{ github.event_name == 'pull_request' || github.event_name == 'schedule' }}
      uses: Azure/CLI@v1
      env:
        AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
      with:
        inlineScript: | 
          # Wait for Minecraft to boot up
          while ! echo exit | nc $TF_OUT_minecraft_server_fqdn $TF_OUT_minecraft_server_port; do sleep 10; done
          az container show --ids ${{ steps.terraform-apply.outputs.container_group_id }} --query instanceView
          az container logs --ids ${{ steps.terraform-apply.outputs.container_group_id }}
          # BUG: no tty
          # az container exec --ids ${{ steps.terraform-apply.outputs.container_group_id }} --exec-command "rcon-cli say ping" --container-name minecraft

    - name: Terraform Destroy
      if: ${{ github.event_name == 'pull_request' || github.event_name == 'schedule' }}
      uses: Azure/powershell@v1
      with:
        inlineScript: | 
          Set-Location (Join-Path $env:GITHUB_WORKSPACE terraform) # Task does not support 'working-directory' property
          terraform destroy -auto-approve
        azPSVersion: latest
        errorActionPreference: Stop
        failOnStandardError: true

    - name: Clean Up
      if: ${{ always() }}
      uses: Azure/powershell@v1
      with:
        inlineScript: |
          Set-Location (Join-Path $env:GITHUB_WORKSPACE terraform) # Task does not support 'working-directory' property

          # Remove resource locks first
          $storageAccountID = $(terraform output -raw storage_account_id)
          if ($storageAccountID) {
            $storageLockID = $(az resource lock list --resource $storageAccountID --query [].id -o tsv)
          }
          if ($storageLockID) {
            az resource lock delete --ids $storageLockID --verbose
          }

          # Build JMESPath expression
          $repository = ($env:GITHUB_REPOSITORY).Split("/")[-1]
          $tagQuery = "[?tags.repository == '${repository}' && tags.workspace == '${env:TF_WORKSPACE}' && tags.runid == '${env:GITHUB_RUN_ID}' && properties.provisioningState != 'Deleting'].id"

          Write-Host "Removing resource group identified by `"$tagQuery`"..."
          $resourceGroupIDs = $(az group list --query "$tagQuery" -o tsv)
          if ($resourceGroupIDs) {
            Write-Host "az resource delete --ids ${resourceGroupIDs}..."
            az resource delete --ids $resourceGroupIDs --verbose
          } else {
            Write-Host "Nothing to remove"
          }
        azPSVersion: latest
        errorActionPreference: Continue
        failOnStandardError: true