on:
  pull_request:
    branches: [ main ]
    paths-ignore:
    - '**/README.md'
    - '**/LICENSE'
    - 'visuals/**'

  schedule:
  - cron:  '0 2 * * *'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  ARM_SAS_TOKEN: ${{ secrets.ARM_SAS_TOKEN }}
  TF_STATE_backend_storage_container: ${{ secrets.TF_STATE_BACKEND_STORAGE_CONTAINER }}
  TF_STATE_backend_storage_account: ${{ secrets.TF_STATE_BACKEND_STORAGE_ACCOUNT }}
  TF_STATE_backend_resource_group: ${{ secrets.TF_STATE_BACKEND_RESOURCE_GROUP }}
  TF_IN_AUTOMATION: true
  TF_INPUT: 0
  TF_WORKSPACE: ci

name: ci-scripted

jobs:
  prepare:
    name: Prepare strategy
    defaults:
      run:
        working-directory: terraform
    runs-on: ubuntu-latest
    steps:
    - name: Checkout source
      uses: actions/checkout@v2
    - name: Detect desired Terraform version
      id: terraform-version-check
      run: | 
        $terraformPreferredVersion = (Get-Content .terraform-version)
        Write-Output "::set-output name=terraform_preferred_version::${terraformPreferredVersion}"

        $terraformLatestVersion = (Invoke-WebRequest -Uri https://checkpoint-api.hashicorp.com/v1/check/terraform -UseBasicParsing | Select-Object -ExpandProperty Content | ConvertFrom-Json | Select-Object -ExpandProperty "current_version")
        Write-Output "::set-output name=terraform_latest_version::${terraformLatestVersion}"
      shell: pwsh
    outputs:
      terraform_preferred_version: ${{ steps.terraform-version-check.outputs.terraform_preferred_version }}
      terraform_latest_version: ${{ steps.terraform-version-check.outputs.terraform_latest_version }}

  integrated:
    needs: prepare
    defaults:
      run:
        working-directory: scripts

    strategy:
      fail-fast: false
      max-parallel: 1
      matrix:
        os: [ubuntu-latest]
        pin_terraform_version: [true, false]
        pin_provider_versions: [true, false]
        include:
        - pin_terraform_version: true
          terraform_apply: true
          terraform_version: ${{ needs.prepare.outputs.terraform_preferred_version }}
        - pin_terraform_version: false
          terraform_apply: false
          terraform_version: ${{ needs.prepare.outputs.terraform_latest_version }}

    name: Pin providers = ${{ matrix.pin_provider_versions }} - Terraform ${{ matrix.terraform_version }}
    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout source
      uses: actions/checkout@v2

    - name: Dump strategy context
      env:
        MATRIX_CONTEXT: ${{ toJSON(matrix) }}
        STRATEGY_CONTEXT: ${{ toJSON(strategy) }}
      run: |
        Write-Host "Strategy context:"
        $env:STRATEGY_CONTEXT | ConvertFrom-Json | Format-List
        Write-Host "Matrix context:"
        $env:MATRIX_CONTEXT   | ConvertFrom-Json | Format-List
      shell: pwsh

    - name: Use Azure CLI
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        enable-AzPSSession: false

    - name: Use Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: ${{matrix.terraform_version}}
        terraform_wrapper: false

    - name: Unpin Terraform provider versions
      id: terraform-version-check
      if: ${{ !matrix.pin_provider_versions }}
      run: | 
        Set-Location (Join-Path $env:GITHUB_WORKSPACE terraform) # Task does not support 'working-directory' property
        (Get-Content ./provider.tf) -replace " = `" *= +",' = "~> ' | Out-File provider.tf
        Get-Content ./provider.tf
        if (Test-Path .terraform.lock.hcl) {
          Remove-Item .terraform.lock.hcl -Force
        }
      shell: pwsh

    - name: Prepare environment variables
      env:
        AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
      run: | 
        # Parse Azure secret into Terraform variables
        $servicePrincipal = ($env:AZURE_CREDENTIALS | ConvertFrom-Json)
        $env:ARM_CLIENT_ID = $servicePrincipal.clientId
        $env:ARM_CLIENT_SECRET = $servicePrincipal.clientSecret
        $env:ARM_SUBSCRIPTION_ID = $servicePrincipal.subscriptionId
        $env:ARM_TENANT_ID = $servicePrincipal.tenantId

        $env:TF_VAR_run_id=$env:GITHUB_RUN_ID
        # We may not be able to create a Service Principal with a Service Principal, reuse Terraform SP for Logic App:
        $env:TF_VAR_workflow_sp_application_id = $servicePrincipal.clientId
        $env:TF_VAR_workflow_sp_application_secret = $servicePrincipal.clientSecret
        $env:TF_VAR_workflow_sp_object_id = $servicePrincipal.objectId
        
        # List environment variables
        Get-ChildItem -Path Env: -Recurse -Include ARM_*,AZURE_*,GITHUB_*,TF_* | Sort-Object -Property Name
        # Save environment variable setup for subsequent steps
        Get-ChildItem -Path Env: -Recurse -Include ARM_*,TF_VAR_* | ForEach-Object {Write-Output "$($_.Name)=$($_.Value)"} >> $env:GITHUB_ENV
      shell: pwsh

    - name: Terraform Init & Plan
      run: ./deploy.ps1 -Init -Plan
      shell: pwsh
        
    - name: Use Node.js
      if: ${{ matrix.terraform_apply }}
      uses: actions/setup-node@v1
    - name: Install Azure Functions Core Tools
      if: ${{ matrix.terraform_apply }}
      run: 
        npm i -g azure-functions-core-tools@3 --unsafe-perm true
        
    - name: Terraform Apply
      id: terraform-apply
      if: ${{ matrix.terraform_apply }}
      run: ./deploy.ps1 -Apply -Force -NoCode
      shell: pwsh

    - name: Deploy Azure Function
      if: ${{ matrix.terraform_apply }}
      run: ./deploy_functions.ps1
      shell: pwsh

    - name: Test connection to Minecraft Server
      if: ${{ matrix.terraform_apply }}
      run: | 
        Set-Location (Join-Path $env:GITHUB_WORKSPACE terraform) # Task does not support 'working-directory' property
        $minecraftConfig  = (terraform output -json minecraft | ConvertFrom-Json -AsHashtable)
        foreach ($minecraftConfigName in $minecraftConfig.Keys) {
          Write-Host "Processing configuration '{$minecraftConfigName}''..."
          $containerGroupID = $minecraftConfig[$minecraftConfigName].container_group_id
          $serverFQDN       = $minecraftConfig[$minecraftConfigName].minecraft_server_fqdn
          $serverPort       = $minecraftConfig[$minecraftConfigName].minecraft_server_port

          # Wait for Minecraft socket to open
          $connectionAttempts = 0
          do {
            Start-Sleep -Seconds 10
            Write-Host "Pinging ${serverFQDN} on port ${serverPort}..."
            try {
              $connectionAttempts++
              $mineCraftConnection = New-Object System.Net.Sockets.TcpClient($serverFQDN, $serverPort) -ErrorAction SilentlyContinue
            } catch [System.Management.Automation.MethodInvocationException] {
              Write-Warning $_
            }
          } while ((!$mineCraftConnection || !$mineCraftConnection.Connected) -and ($connectionAttempts -le 10))
          # No tty
          # az container exec --ids $containerGroupID --exec-command "/health.sh" --container-name minecraft
          
          az container show --ids $containerGroupID --query instanceView
          az container logs --ids $containerGroupID
        }
      shell: pwsh

    - name: Remove backup items & resource locks
      if: ${{ matrix.terraform_apply }}
      run: | 
        . (Join-Path $env:GITHUB_WORKSPACE scripts functions.ps1)
        TearDown-Resources -Backups -Locks
      shell: pwsh

    - name: Terraform Destroy
      if: ${{ matrix.terraform_apply }}
      run: ./deploy.ps1 -Destroy -Force
      shell: pwsh
      continue-on-error: false

    - name: Upload artifacts
      uses: actions/upload-artifact@v2
      if: ${{ matrix.terraform_apply }}
      with:
        name: terraform
        path: 'terraform'
      
    - name: Teardown
      if: ${{ always() }}
      run: ./deploy.ps1 -Init -Teardown
      shell: pwsh
