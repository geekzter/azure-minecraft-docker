on:
  pull_request:
    branches: [ main ]
    paths-ignore:
    - '**/README.md'
    - '**/LICENSE'
    - 'visuals/**'

  schedule:
  - cron:  '0 2 * * *'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  ARM_SAS_TOKEN: ${{ secrets.ARM_SAS_TOKEN }}
  TF_STATE_backend_storage_container: ${{ secrets.TF_STATE_backend_storage_container }}
  TF_STATE_backend_storage_account: ${{ secrets.TF_STATE_backend_storage_account }}
  TF_STATE_backend_resource_group: ${{ secrets.TF_STATE_backend_resource_group }}
  TF_IN_AUTOMATION: true
  TF_INPUT: 0
  TF_WORKSPACE: ci

name: ci-scripted

jobs:
  integrated:
    name: The whole shebang
    defaults:
      run:
        working-directory: terraform
    # runs-on: ${{ matrix.os }}
    # strategy:
    #     matrix:
    #       os: [windows-latest, ubuntu-latest, macos-latest]
    #       terraform-versions: [0.13.6, latest]
    runs-on: ubuntu-latest
    steps:
    - name: Checkout source
      uses: actions/checkout@v2

    - name: Use Azure CLI
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Detect desired Terraform version
      id: terraform-version-check
      run: | 
        $terraformVersion = (Get-Content .terraform-version)
        Write-Output "::set-output name=TERRAFORM_VERSION::${terraformVersion}"
      shell: pwsh
    - name: Use Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: ${{ steps.terraform-version-check.outputs.TERRAFORM_VERSION }}
        terraform_wrapper: false

    - name: Use Node.js
      uses: actions/setup-node@v1
      # with:
      #   node-version: ${{ env.NODE_VERSION }}
    - name: Install Azure Functions Core Tools
      run: 
        npm i -g azure-functions-core-tools@3 --unsafe-perm true
        
    - name: Terraform Provisioning inc. Azure Function
      id: terraform-apply
      uses: Azure/powershell@v1
      env:
        AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
      with:
        inlineScript: | 
          # Parse Azure secret into Terraform variables
          $servicePrincipal = ($env:AZURE_CREDENTIALS | ConvertFrom-Json)
          $env:ARM_CLIENT_ID = $servicePrincipal.clientId
          $env:ARM_CLIENT_SECRET = $servicePrincipal.clientSecret
          $env:ARM_SUBSCRIPTION_ID = $servicePrincipal.subscriptionId
          $env:ARM_TENANT_ID = $servicePrincipal.tenantId

          $env:TF_VAR_run_id=$env:GITHUB_RUN_ID
          # We may not be able to create a Service Principal with a Service Principal, reuse Terraform SP for Logic App:
          $env:TF_VAR_workflow_sp_application_id = $servicePrincipal.clientId
          $env:TF_VAR_workflow_sp_application_secret = $servicePrincipal.clientSecret
          $env:TF_VAR_workflow_sp_object_id = $servicePrincipal.objectId
          
          # List environment variables
          Get-ChildItem -Path Env: -Recurse -Include ARM_*,AZURE_*,GITHUB_*,TF_* | Sort-Object -Property Name
          # Save environment variable setup for subsequent steps
          Get-ChildItem -Path Env: -Recurse -Include ARM_*,TF_VAR_* | ForEach-Object {Write-Output "$($_.Name)=$($_.Value)"} >> $env:GITHUB_ENV

          Set-Location (Join-Path $env:GITHUB_WORKSPACE scripts) # Task does not support 'working-directory' property
          Get-Location
          ./deploy.ps1 -Init -Apply -Force
        azPSVersion: latest
        errorActionPreference: Stop
        failOnStandardError: true

    - name: Test connection to Minecraft Server (pwsh)
      uses: Azure/powershell@v1
      env:
        AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
      with:
        inlineScript: | 
          # Wait for Minecraft to boot up
          $connectionAttempts = 0
          do {
            Start-Sleep -Seconds 10
            Write-Host "Pinging ${env:TF_OUT_minecraft_server_fqdn} on port ${env:TF_OUT_minecraft_server_port}..."
            try {
              $connectionAttempts++
              $mineCraftConnection = New-Object System.Net.Sockets.TcpClient($env:TF_OUT_minecraft_server_fqdn, $env:TF_OUT_minecraft_server_port) -ErrorAction SilentlyContinue
            } catch [System.Management.Automation.MethodInvocationException] {
              Write-Warning $_
            }
          } while ((!$mineCraftConnection || !$mineCraftConnection.Connected) -and ($connectionAttempts -le 10))
          
          az container show --ids ${{ steps.terraform-apply.outputs.container_group_id }} --query instanceView
          az container logs --ids ${{ steps.terraform-apply.outputs.container_group_id }}
          # BUG: no tty
          # az container exec --ids ${{ steps.terraform-apply.outputs.container_group_id }} --exec-command "rcon-cli say hello from ci" --container-name minecraft
        azPSVersion: latest
        errorActionPreference: Stop
        failOnStandardError: true # BUG: setting not honored! https://github.com/Azure/powershell/issues/33

    - name: Upload artifacts
      uses: actions/upload-artifact@v2
      with:
        name: terraform
        path: 'terraform'
      
    - name: Clean Up
      if: ${{ always() }}
      uses: Azure/powershell@v1
      with:
        inlineScript: |
          Set-Location (Join-Path $env:GITHUB_WORKSPACE terraform) # Task does not support 'working-directory' property

          # Remove resource locks first
          $resourceLocksJSON = $(terraform output -json resource_locks 2>$null)
          if ($resourceLocksJSON -and ($resourceLocksJSON -match "^\[.*\]$")) {
            $resourceLocks = ($resourceLocksJSON | ConvertFrom-JSON)
            az resource lock delete --ids $resourceLocks --verbose
          }

          # Build JMESPath expression
          $repository = ($env:GITHUB_REPOSITORY).Split("/")[-1]
          $tagQuery = "[?tags.repository == '${repository}' && tags.workspace == '${env:TF_WORKSPACE}' && tags.runid == '${env:GITHUB_RUN_ID}' && properties.provisioningState != 'Deleting'].id"

          Write-Host "Removing resource group identified by `"$tagQuery`"..."
          $resourceGroupIDs = $(az group list --query "$tagQuery" -o tsv)
          if ($resourceGroupIDs) {
            Write-Host "az resource delete --ids ${resourceGroupIDs}..."
            az resource delete --ids $resourceGroupIDs --verbose
          } else {
            Write-Host "Nothing to remove"
          }

          # Clean up Terraform state
          # Parse Azure secret into Terraform variables
          $servicePrincipal = ($env:AZURE_CREDENTIALS | ConvertFrom-Json)
          $env:ARM_CLIENT_ID = $servicePrincipal.clientId
          $env:ARM_CLIENT_SECRET = $servicePrincipal.clientSecret
          $env:ARM_SUBSCRIPTION_ID = $servicePrincipal.subscriptionId
          $env:ARM_TENANT_ID = $servicePrincipal.tenantId
          Copy-Item backend.tf.sample backend.tf
          terraform version
          terraform init -reconfigure `
                         -backend-config="resource_group_name=$(TF_STATE_RESOURCE_GROUP_NAME)" `
                         -backend-config="storage_account_name=$(TF_STATE_STORAGE_ACCOUNT_NAME)" `
                         -backend-config="container_name=$(TF_STATE_CONTAINER_NAME)" 
          $terraformState = (terraform state pull | ConvertFrom-Json)
          if ($terraformState.resources) {
            Write-Host "Clearing Terraform state in workspace ${env:TF_WORKSPACE}..."
            $terraformState.outputs = New-Object PSObject # Empty output
            $terraformState.resources = @() # No resources
            $terraformState.serial++
            $terraformState | ConvertTo-Json | terraform state push -
          } else {
            Write-Host "No resources in Terraform state in workspace ${env:TF_WORKSPACE}..."
          }
          terraform state pull           
        azPSVersion: latest
        errorActionPreference: Continue
        failOnStandardError: true